// Code generated by MockGen. DO NOT EDIT.
// Source: pellets-tracker/internal/http (interfaces: DataStore)
//
// Generated by this command:
//
//	mockgen -destination=internal/http/mock/datastore.go -package=mock pellets-tracker/internal/http DataStore
//

// Package mock is a generated GoMock package.
package mock

import (
	core "pellets-tracker/internal/core"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
	isgomock struct{}
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockDataStore) Data() core.DataStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(core.DataStore)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockDataStoreMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockDataStore)(nil).Data))
}

// Replace mocks base method.
func (m *MockDataStore) Replace(arg0 core.DataStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockDataStoreMockRecorder) Replace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockDataStore)(nil).Replace), arg0)
}
